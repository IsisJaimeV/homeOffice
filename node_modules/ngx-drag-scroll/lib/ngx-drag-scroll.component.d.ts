/// <reference types="node" />
import { ElementRef, Renderer2, OnDestroy, AfterViewInit, OnChanges, EventEmitter, AfterViewChecked, QueryList } from '@angular/core';
import { DragScrollItemDirective } from './ngx-drag-scroll-item';
import * as ɵngcc0 from '@angular/core';
export declare class DragScrollComponent implements OnDestroy, AfterViewInit, OnChanges, AfterViewChecked {
    private _elementRef;
    private _renderer;
    private _document;
    private _index;
    private _scrollbarHidden;
    private _disabled;
    private _xDisabled;
    private _xWheelEnabled;
    private _yDisabled;
    private _dragDisabled;
    private _snapDisabled;
    private _snapOffset;
    private _snapDuration;
    private _isDragging;
    private _onMouseMoveListener;
    private _onMouseUpListener;
    private _onMouseDownListener;
    private _onScrollListener;
    private _onDragStartListener;
    /**
     * Is the user currently pressing the element
     */
    isPressed: boolean;
    /**
     * Is the user currently scrolling the element
     */
    isScrolling: boolean;
    scrollTimer: number | NodeJS.Timer;
    scrollToTimer: number | NodeJS.Timer;
    /**
     * Is the user currently dragging the element
     */
    get isDragging(): boolean;
    /**
     * The x coordinates on the element
     */
    downX: number;
    /**
     * The y coordinates on the element
     */
    downY: number;
    displayType: string | null;
    elWidth: string | null;
    elHeight: string | null;
    /**
     * The parentNode of carousel Element
     */
    parentNode: HTMLElement;
    /**
     * The carousel Element
     */
    _contentRef: ElementRef;
    _children: QueryList<DragScrollItemDirective>;
    _pointerEvents: string;
    wrapper: HTMLDivElement | null;
    scrollbarWidth: string | null;
    get currIndex(): number;
    set currIndex(value: number);
    isAnimating: boolean;
    prevChildrenLength: number;
    indexBound: number;
    dsInitialized: EventEmitter<void>;
    indexChanged: EventEmitter<number>;
    reachesLeftBound: EventEmitter<boolean>;
    reachesRightBound: EventEmitter<boolean>;
    snapAnimationFinished: EventEmitter<number>;
    dragStart: EventEmitter<void>;
    dragEnd: EventEmitter<void>;
    /**
     * Whether the scrollbar is hidden
     */
    get scrollbarHidden(): boolean;
    set scrollbarHidden(value: boolean);
    /**
     * Whether horizontally and vertically draging and scrolling is be disabled
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Whether horizontally dragging and scrolling is be disabled
     */
    get xDisabled(): boolean;
    set xDisabled(value: boolean);
    /**
     * Whether vertically dragging and scrolling events is disabled
     */
    get yDisabled(): boolean;
    set yDisabled(value: boolean);
    /**
     * Whether scrolling horizontally with mouse wheel is enabled
     */
    get xWheelEnabled(): boolean;
    set xWheelEnabled(value: boolean);
    get dragDisabled(): boolean;
    set dragDisabled(value: boolean);
    get snapDisabled(): boolean;
    set snapDisabled(value: boolean);
    get snapOffset(): number;
    set snapOffset(value: number);
    get snapDuration(): number;
    set snapDuration(value: number);
    constructor(_elementRef: ElementRef, _renderer: Renderer2, _document: any);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    onMouseMoveHandler(event: MouseEvent): void;
    onMouseMove(event: MouseEvent): void;
    onMouseDownHandler(event: MouseEvent): void;
    onScrollHandler(): void;
    onMouseUpHandler(event: MouseEvent): void;
    moveLeft(): void;
    moveRight(): void;
    moveTo(index: number): void;
    checkNavStatus(): void;
    onWheel(event: WheelEvent): void;
    onWindowResize(): void;
    private _setIsDragging;
    private _startGlobalListening;
    private _stopGlobalListening;
    private disableScroll;
    private enableScroll;
    private hideScrollbar;
    private showScrollbar;
    private checkScrollbar;
    private setScrollBar;
    private getScrollbarWidth;
    private refreshWrapperDimensions;
    private scrollTo;
    private locateCurrentIndex;
    private currentChildWidth;
    private toChildrenLocation;
    private locateDragScrollItem;
    private markElDimension;
    private maximumIndex;
    private isScrollReachesRightEnd;
    /**
     * adds a margin right style to the last child element which will resolve the issue
     * of last item gets cutoff.
     */
    private adjustMarginToLastChild;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragScrollComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DragScrollComponent, "drag-scroll", never, { "scrollbarHidden": "scrollbar-hidden"; "disabled": "drag-scroll-disabled"; "xDisabled": "drag-scroll-x-disabled"; "yDisabled": "drag-scroll-y-disabled"; "xWheelEnabled": "scroll-x-wheel-enabled"; "dragDisabled": "drag-disabled"; "snapDisabled": "snap-disabled"; "snapOffset": "snap-offset"; "snapDuration": "snap-duration"; }, { "dsInitialized": "dsInitialized"; "indexChanged": "indexChanged"; "reachesLeftBound": "reachesLeftBound"; "reachesRightBound": "reachesRightBound"; "snapAnimationFinished": "snapAnimationFinished"; "dragStart": "dragStart"; "dragEnd": "dragEnd"; }, ["_children"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyYWctc2Nyb2xsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtZHJhZy1zY3JvbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwibm9kZVwiIC8+XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0NoZWNrZWQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHJhZ1Njcm9sbEl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL25neC1kcmFnLXNjcm9sbC1pdGVtJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERyYWdTY3JvbGxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICBwcml2YXRlIF9pbmRleDtcbiAgICBwcml2YXRlIF9zY3JvbGxiYXJIaWRkZW47XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfeERpc2FibGVkO1xuICAgIHByaXZhdGUgX3hXaGVlbEVuYWJsZWQ7XG4gICAgcHJpdmF0ZSBfeURpc2FibGVkO1xuICAgIHByaXZhdGUgX2RyYWdEaXNhYmxlZDtcbiAgICBwcml2YXRlIF9zbmFwRGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfc25hcE9mZnNldDtcbiAgICBwcml2YXRlIF9zbmFwRHVyYXRpb247XG4gICAgcHJpdmF0ZSBfaXNEcmFnZ2luZztcbiAgICBwcml2YXRlIF9vbk1vdXNlTW92ZUxpc3RlbmVyO1xuICAgIHByaXZhdGUgX29uTW91c2VVcExpc3RlbmVyO1xuICAgIHByaXZhdGUgX29uTW91c2VEb3duTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBfb25TY3JvbGxMaXN0ZW5lcjtcbiAgICBwcml2YXRlIF9vbkRyYWdTdGFydExpc3RlbmVyO1xuICAgIC8qKlxuICAgICAqIElzIHRoZSB1c2VyIGN1cnJlbnRseSBwcmVzc2luZyB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIGlzUHJlc3NlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJcyB0aGUgdXNlciBjdXJyZW50bHkgc2Nyb2xsaW5nIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgaXNTY3JvbGxpbmc6IGJvb2xlYW47XG4gICAgc2Nyb2xsVGltZXI6IG51bWJlciB8IE5vZGVKUy5UaW1lcjtcbiAgICBzY3JvbGxUb1RpbWVyOiBudW1iZXIgfCBOb2RlSlMuVGltZXI7XG4gICAgLyoqXG4gICAgICogSXMgdGhlIHVzZXIgY3VycmVudGx5IGRyYWdnaW5nIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0IGlzRHJhZ2dpbmcoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgeCBjb29yZGluYXRlcyBvbiB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIGRvd25YOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHkgY29vcmRpbmF0ZXMgb24gdGhlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBkb3duWTogbnVtYmVyO1xuICAgIGRpc3BsYXlUeXBlOiBzdHJpbmcgfCBudWxsO1xuICAgIGVsV2lkdGg6IHN0cmluZyB8IG51bGw7XG4gICAgZWxIZWlnaHQ6IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhlIHBhcmVudE5vZGUgb2YgY2Fyb3VzZWwgRWxlbWVudFxuICAgICAqL1xuICAgIHBhcmVudE5vZGU6IEhUTUxFbGVtZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBjYXJvdXNlbCBFbGVtZW50XG4gICAgICovXG4gICAgX2NvbnRlbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgX2NoaWxkcmVuOiBRdWVyeUxpc3Q8RHJhZ1Njcm9sbEl0ZW1EaXJlY3RpdmU+O1xuICAgIF9wb2ludGVyRXZlbnRzOiBzdHJpbmc7XG4gICAgd3JhcHBlcjogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuICAgIHNjcm9sbGJhcldpZHRoOiBzdHJpbmcgfCBudWxsO1xuICAgIGdldCBjdXJySW5kZXgoKTogbnVtYmVyO1xuICAgIHNldCBjdXJySW5kZXgodmFsdWU6IG51bWJlcik7XG4gICAgaXNBbmltYXRpbmc6IGJvb2xlYW47XG4gICAgcHJldkNoaWxkcmVuTGVuZ3RoOiBudW1iZXI7XG4gICAgaW5kZXhCb3VuZDogbnVtYmVyO1xuICAgIGRzSW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBpbmRleENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHJlYWNoZXNMZWZ0Qm91bmQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFjaGVzUmlnaHRCb3VuZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHNuYXBBbmltYXRpb25GaW5pc2hlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgZHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgZHJhZ0VuZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHNjcm9sbGJhciBpcyBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgc2Nyb2xsYmFySGlkZGVuKCk6IGJvb2xlYW47XG4gICAgc2V0IHNjcm9sbGJhckhpZGRlbih2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqXG4gICAgICogV2hldGhlciBob3Jpem9udGFsbHkgYW5kIHZlcnRpY2FsbHkgZHJhZ2luZyBhbmQgc2Nyb2xsaW5nIGlzIGJlIGRpc2FibGVkXG4gICAgICovXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGhvcml6b250YWxseSBkcmFnZ2luZyBhbmQgc2Nyb2xsaW5nIGlzIGJlIGRpc2FibGVkXG4gICAgICovXG4gICAgZ2V0IHhEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCB4RGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdmVydGljYWxseSBkcmFnZ2luZyBhbmQgc2Nyb2xsaW5nIGV2ZW50cyBpcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIGdldCB5RGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgeURpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHNjcm9sbGluZyBob3Jpem9udGFsbHkgd2l0aCBtb3VzZSB3aGVlbCBpcyBlbmFibGVkXG4gICAgICovXG4gICAgZ2V0IHhXaGVlbEVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgeFdoZWVsRW5hYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGRyYWdEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkcmFnRGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBzbmFwRGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgc25hcERpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgc25hcE9mZnNldCgpOiBudW1iZXI7XG4gICAgc2V0IHNuYXBPZmZzZXQodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IHNuYXBEdXJhdGlvbigpOiBudW1iZXI7XG4gICAgc2V0IHNuYXBEdXJhdGlvbih2YWx1ZTogbnVtYmVyKTtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF9kb2N1bWVudDogYW55KTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25Nb3VzZU1vdmVIYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbk1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgb25Nb3VzZURvd25IYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvblNjcm9sbEhhbmRsZXIoKTogdm9pZDtcbiAgICBvbk1vdXNlVXBIYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBtb3ZlTGVmdCgpOiB2b2lkO1xuICAgIG1vdmVSaWdodCgpOiB2b2lkO1xuICAgIG1vdmVUbyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBjaGVja05hdlN0YXR1cygpOiB2b2lkO1xuICAgIG9uV2hlZWwoZXZlbnQ6IFdoZWVsRXZlbnQpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfc2V0SXNEcmFnZ2luZztcbiAgICBwcml2YXRlIF9zdGFydEdsb2JhbExpc3RlbmluZztcbiAgICBwcml2YXRlIF9zdG9wR2xvYmFsTGlzdGVuaW5nO1xuICAgIHByaXZhdGUgZGlzYWJsZVNjcm9sbDtcbiAgICBwcml2YXRlIGVuYWJsZVNjcm9sbDtcbiAgICBwcml2YXRlIGhpZGVTY3JvbGxiYXI7XG4gICAgcHJpdmF0ZSBzaG93U2Nyb2xsYmFyO1xuICAgIHByaXZhdGUgY2hlY2tTY3JvbGxiYXI7XG4gICAgcHJpdmF0ZSBzZXRTY3JvbGxCYXI7XG4gICAgcHJpdmF0ZSBnZXRTY3JvbGxiYXJXaWR0aDtcbiAgICBwcml2YXRlIHJlZnJlc2hXcmFwcGVyRGltZW5zaW9ucztcbiAgICBwcml2YXRlIHNjcm9sbFRvO1xuICAgIHByaXZhdGUgbG9jYXRlQ3VycmVudEluZGV4O1xuICAgIHByaXZhdGUgY3VycmVudENoaWxkV2lkdGg7XG4gICAgcHJpdmF0ZSB0b0NoaWxkcmVuTG9jYXRpb247XG4gICAgcHJpdmF0ZSBsb2NhdGVEcmFnU2Nyb2xsSXRlbTtcbiAgICBwcml2YXRlIG1hcmtFbERpbWVuc2lvbjtcbiAgICBwcml2YXRlIG1heGltdW1JbmRleDtcbiAgICBwcml2YXRlIGlzU2Nyb2xsUmVhY2hlc1JpZ2h0RW5kO1xuICAgIC8qKlxuICAgICAqIGFkZHMgYSBtYXJnaW4gcmlnaHQgc3R5bGUgdG8gdGhlIGxhc3QgY2hpbGQgZWxlbWVudCB3aGljaCB3aWxsIHJlc29sdmUgdGhlIGlzc3VlXG4gICAgICogb2YgbGFzdCBpdGVtIGdldHMgY3V0b2ZmLlxuICAgICAqL1xuICAgIHByaXZhdGUgYWRqdXN0TWFyZ2luVG9MYXN0Q2hpbGQ7XG59XG4iXX0=